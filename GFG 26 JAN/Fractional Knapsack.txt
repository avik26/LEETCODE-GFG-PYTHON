class Item:
    def __init__(self,val,w):
        self.value = val
        self.weight = w
        
class Solution:    
    #Function to get the maximum total value in the knapsack.
    def fractionalknapsack(self, W,arr,n):
        
        # code here
        for item in arr:
            item.ratio = item.value / item.weight

        # Sort items based on the value-to-weight ratio in descending order
        arr.sort(key=lambda x: x.ratio, reverse=True)

        total_value = 0.0
        current_weight = 0

        for item in arr:
            if current_weight + item.weight <= W:
                # Take the whole item
                total_value += item.value
                current_weight += item.weight
            else:
                # Take a fraction of the item to fill the remaining capacity
                remaining_weight = W - current_weight
                fraction = remaining_weight / item.weight
                total_value += fraction * item.value
                break  # Knapsack is full, no need to process further

        return total_value