class Solution:
    def minimumNumberOfDeletions(self, S):
        n = len(S)
        
        # Create a table to store the length of the longest palindromic subsequence
        dp = [[0] * n for _ in range(n)]
        
        # Initialize the table for substrings of length 1
        for i in range(n):
            dp[i][i] = 1
        
        # Calculate the table using bottom-up dynamic programming
        for cl in range(2, n + 1):
            for i in range(n - cl + 1):
                j = i + cl - 1
                if S[i] == S[j]:
                    dp[i][j] = 2 + dp[i + 1][j - 1]
                else:
                    dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])
        
        # The length of the longest palindromic subsequence
        # is dp[0][n-1], and the minimum deletions required
        # is n - dp[0][n-1]
        return n - dp[0][n - 1]
