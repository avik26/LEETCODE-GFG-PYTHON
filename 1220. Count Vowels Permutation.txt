class Solution:
    def countVowelPermutation(self, n: int) -> int:
        MOD = 10**9 + 7

        # Create a 2D array dp to store the counts
        # dp[i][j] represents the number of valid strings of length i ending with vowel j
        dp = [[0] * 5 for _ in range(n)]
        
        # Initialize the base cases for strings of length 1
        for j in range(5):
            dp[0][j] = 1
        
        for i in range(1, n):
            # 'a' can be followed by 'e', 'e' can be followed by 'a' or 'i', and so on
            dp[i][0] = (dp[i-1][1] + dp[i-1][2] + dp[i-1][4]) % MOD
            dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % MOD
            dp[i][2] = (dp[i-1][1] + dp[i-1][3]) % MOD
            dp[i][3] = dp[i-1][2] % MOD
            dp[i][4] = (dp[i-1][2] + dp[i-1][3]) % MOD
        
        # Sum up the counts of strings of length n ending with each vowel
        total_count = sum(dp[n-1]) % MOD

        return total_count
    #Runtime: 186 ms, faster than 75.00% of Python3 online submissions for Count Vowels PermutationMemory Usage: 21.4 MB, less than 52.50% of Python3 online submissions for Count Vowels Permutation.
