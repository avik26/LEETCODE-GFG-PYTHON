class Node:
    def __init__(self, val):
        self.right = None
        self.data = val
        self.left = None

class Solution:
    def sumK(self, root, k):
        # Helper function to perform recursive traversal
        def count_paths(node, current_sum, target_sum, prefix_sums):
            if not node:
                return 0

            current_sum += node.data
            valid_paths = prefix_sums.get(current_sum - target_sum, 0)

            # Update prefix_sums dictionary
            prefix_sums[current_sum] = prefix_sums.get(current_sum, 0) + 1

            # Recursive calls for left and right subtrees
            valid_paths += count_paths(node.left, current_sum, target_sum, prefix_sums)
            valid_paths += count_paths(node.right, current_sum, target_sum, prefix_sums)

            # Backtrack: Remove the current_sum from prefix_sums
            prefix_sums[current_sum] -= 1

            return valid_paths

        # Initialize prefix_sums with 0 to account for paths starting from the root
        prefix_sums = {0: 1}

        # Call the helper function to count paths with sum k
        result = count_paths(root, 0, k, prefix_sums)

        # Return the result modulo 10^9 + 7
        return result % (10**9 + 7)