class Solution:
    def numFactoredBinaryTrees(self, arr: List[int]) -> int:
        MOD = 10**9 + 7

        # Sort the array in ascending order.
        arr.sort()

        # Create a dictionary to store the number of binary trees that can be made with a given root value.
        dp = {}

        # For each value in the array, try to make a binary tree with that value as the root.
        for i in range(len(arr)):
            root = arr[i]
            dp[root] = 1

            # For each pair of factors of the root, try to make a binary tree with those factors as the children.
            for j in range(i):
                factor = arr[j]
                if root % factor == 0:
                    other_factor = root // factor
                    if other_factor in dp:
                        dp[root] += dp[factor] * dp[other_factor]
                        dp[root] %= MOD

        # Return the sum of the number of binary trees that can be made with each value in the array as the root.
        return sum(dp.values()) % MOD
#Runtime: 280 ms, faster than 83.33% of Python3 online submissions for Binary Trees With Factors.Memory Usage: 16.5 MB, less than 47.50% of Python3 online submissions for Binary Trees With Factors.